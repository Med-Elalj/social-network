package routes__test

import (
	"net/http"

	"social-network/sn/security/jwt"
)

type endPointTest struct {
	name     string
	method   string
	path     string
	headers  kvp
	cookies  kvp
	body     string
	eStatus  int
	eHeaders kvp
	eBody    string
	dbres    []string
}

var tests []endPointTest

func tests_fill() {
	tests = []endPointTest{
		// {"TEST NAME   ",
		// 	"METHOD", "/URL/PATH&querry=value", []kvp{{"Header Name": "Header Value"}}, kvp{"Cookie Name": "Cookie Value"},`Request Body`,
		// 	http.ExpectedStatus, []kvp{{"Expected Header Name": "Expected Header Value"}}, `Expected Body`} ,
		//  []string{"Database Query", "Database Result Row1", "Database Result Row2"}},
		// }
		// // TODO: add test for IndexHandler
		// {
		// 	"GET root 1   ", "GET", "/",
		// 	kvp{},
		// 	kvp{"JWT": jwt.Generate(jwt.CreateJwtPayload(1, "User_Name"))},
		// 	``,
		// 	http.StatusOK,
		// 	kvp{},
		// 	`hello world`,
		// 	nil,
		// },
		{
			"Isloged in false no uId  ",
			"POST", "/api/v1/auth",
			kvp{},
			kvp{},
			``,
			http.StatusForbidden,
			kvp{"Content-Type": "application/json"},
			`{"error": "jwt cookie not found"}`,
			nil,
		},

		{
			"Isloged in false bad cookie name ",
			"POST", "/api/v1/auth",
			kvp{},
			kvp{"userid": "6352337196a2449cb772b524818bea36"},
			``,
			http.StatusForbidden,
			kvp{"Content-Type": "application/json"},
			`{"error": "jwt cookie not found"}`,
			nil,
		},

		{
			"Isloged in false no uid value ",
			"POST", "/api/v1/auth",
			kvp{},
			kvp{"userId": ""},
			``,
			http.StatusForbidden,
			kvp{"Content-Type": "application/json"},
			`{"error": "jwt cookie not found"}`,
			nil,
		},

		{
			"Isloged in false bad uid value ",
			"POST", "/api/v1/auth",
			kvp{},
			kvp{"jwt": "6352337196a2449cb772b524818bea37"},
			``,
			http.StatusForbidden,
			kvp{"Content-Type": "application/json"},
			`{"error": "invalid or expired token"}`,
			nil,
		},

		{
			"Isloged in true   ",
			"POST", "/api/v1/auth",
			kvp{},
			kvp{"jwt": jwt.Generate(jwt.CreateJwtPayload(1, "User_Name"))},
			``,
			http.StatusOK,
			kvp{"Content-Type": "application/json"},
			`{"id":1,"message":"User is logged in","username":"User_Name"}` + "\n",
			nil,
		},

		{
			"RegisterHandler bad allready logged in  ",
			"POST", "/api/v1/auth/register",
			kvp{},
			kvp{"jwt": jwt.Generate(jwt.CreateJwtPayload(1, "User_Name"))},
			`{
				"username" : "","email" : "","password" : "","age" : "","gender" : "",
				"fname" : "","lname" : "","birthdate" : "","avatar" : "",
				"aboutme" : "","status" : ""
				}`,
			http.StatusForbidden,
			kvp{"Content-Type": "application/json"},
			`{"error": "user is already logged in"}`,
			nil,
		},

		{
			"RegisterHandler bad empty body ",
			"POST", "/api/v1/auth/register",
			kvp{},
			kvp{},
			``,
			http.StatusBadRequest,
			kvp{"Content-Type": "application/json"},
			`{"error": "Request body cannot be empty"}`,
			nil,
		},
		{
			"RegisterHandler bad empty feilds ",
			"POST", "/api/v1/auth/register",
			kvp{},
			kvp{},
			`{ "username": "", "email": "", "birthdate": "", "fname": "", "lname": "", "password": "", "gender": "" }`,
			http.StatusBadRequest,
			kvp{"Content-Type": "application/json"},
			`{"error": "empty feild (birthdate) expected format (YYYY-MM-DD)"}`,
			nil,
		},
		{
			"RegisterHandler bad extra feild ",
			"POST", "/api/v1/auth/register",
			kvp{},
			kvp{},
			`{ "extra": "" }`,
			http.StatusBadRequest,
			kvp{"Content-Type": "application/json"},
			`{"error": "json: unknown field \"extra\""}`,
			nil,
		},
		{
			"RegisterHandler bad feild  value 1",
			"POST", "/api/v1/auth/register",
			kvp{},
			kvp{},
			`{ "username": "a",
		"email": "example@web.site","birthdate": "2001-11-09","fname": "Firstname","lname": "LastName","password": "password","gender": "Attack Helicopter"}`,
			http.StatusBadRequest,
			kvp{"Content-Type": "application/json"},
			`{"error": "field 'username' is invalid: invalid charachters used"}`,
			nil,
		},
		{
			"RegisterHandler bad feild  value 2",
			"POST", "/api/v1/auth/register",
			kvp{},
			kvp{},
			`{"username": "User_Name",
		"email": "example@website",
		"birthdate": "2001-11-09","fname": "Firstname","lname": "LastName","password": "password","gender": "Attack Helicopter" }`,
			http.StatusBadRequest,
			kvp{"Content-Type": "application/json"},
			`{"error": "field 'email' is invalid: malformed or missing data"}`,
			nil,
		},
		{
			"RegisterHandler bad feild  value 3",
			"POST", "/api/v1/auth/register",
			kvp{},
			kvp{},
			`{"username": "User_Name","email": "example@website",
		"birthdate": "2001-13-09",
		"fname": "Firstname", "lname": "LastName", "password": "password", "gender": "Attack Helicopter"}`,
			http.StatusBadRequest,
			kvp{"Content-Type": "application/json"},
			`{"error": "invalid birthdate format (expected YYYY-MM-DD): parsing time \"2001-13-09\": month out of range"}`,
			nil,
		},
		{
			"RegisterHandler good ",
			"POST", "/api/v1/auth/register",
			kvp{},
			kvp{},
			`{"username": "User_Name","email": "example@web.site","birthdate": "2001-11-09","fname": "Firstname", "lname": "LastName", "password": "password", "gender": "Attack Helicopter"}`,
			http.StatusOK,
			kvp{"Content-Type": "application/json"},
			`{"message":"User registered successfully"}`,
			[]string{
				"SELECT pr.display_name, pe.email, pe.date_of_birth, pe.gender, pe.first_name,pe.last_name FROM profile pr JOIN person pe ON pr.id = pe.id WHERE pr.display_name = 'User_Name';",
				"display_name=User_Name, email=example@web.site, date_of_birth=2001-11-09, gender=2, first_name=Firstname, last_name=LastName",
			},
		},
		{
			"RegisterHandler bad all ready exist 1",
			"POST", "/api/v1/auth/register",
			kvp{},
			kvp{},
			`{"username": "User_Name","email": "example_NOT_The_Same@web.site","birthdate": "2001-11-09","fname": "Firstname", "lname": "LastName", "password": "password", "gender": "Attack Helicopter"}`,
			http.StatusConflict,
			kvp{"Content-Type": "application/json"},
			`{"error": "sorry display_name already exists"}`,
			nil,
		},
		{
			"RegisterHandler bad all ready exist 2",
			"POST", "/api/v1/auth/register",
			kvp{},
			kvp{},
			`{"username": "User_Name_not_The_same","email": "example@web.site","birthdate": "2001-11-09","fname": "Firstname", "lname": "LastName", "password": "password", "gender": "Attack Helicopter"}`,
			http.StatusConflict,
			kvp{"Content-Type": "application/json"},
			`{"error": "sorry email already exists"}`,
			nil,
		},
		{
			"LoginHandler bad allready logged in  ",
			"POST", "/api/v1/auth/login",
			kvp{},
			kvp{"jwt": jwt.Generate(jwt.CreateJwtPayload(1, "User_Name"))},
			`{"username": "User_Name","password": "password"}`,
			http.StatusForbidden,
			kvp{"Content-Type": "application/json"},
			`{"error": "user is already logged in"}`,
			nil,
		},
		{
			"LoginHandler bad empty body ",
			"POST", "/api/v1/auth/login",
			kvp{},
			kvp{},
			``,
			http.StatusBadRequest,
			kvp{"Content-Type": "application/json"},
			`{"error": "Request body cannot be empty"}`,
			nil,
		},
		{
			"LoginHandler bad empty feilds ",
			"POST", "/api/v1/auth/login",
			kvp{},
			kvp{},
			`{ "login": "", "pwd": "" }`,
			http.StatusBadRequest,
			kvp{"Content-Type": "application/json"},
			`{"error": "Invalid request body"}`,
			nil,
		},
		{
			"LoginHandler bad extra feild ",
			"POST", "/api/v1/auth/login",
			kvp{},
			kvp{},
			`{ "extra": "" }`,
			http.StatusBadRequest,
			kvp{"Content-Type": "application/json"},
			`{"error": "Invalid request body"}`,
			nil,
		},
		{
			"LoginHandler bad invalid feild  value 1",
			"POST", "/api/v1/auth/login",
			kvp{},
			kvp{},
			`{ "login": "a", "pwd": "password" }`,
			http.StatusBadRequest,
			kvp{"Content-Type": "application/json"},
			`{"error": "Invalid request body"}`,
			nil,
		},
		{
			"LoginHandler bad feild  value 2",
			"POST", "/api/v1/auth/login",
			kvp{},
			kvp{},
			`{ "login": "User_Name", "pwd": "pass" }`,
			http.StatusBadRequest,
			kvp{"Content-Type": "application/json"},
			`{"error": "Invalid request body"}`,
			nil,
		},
		{
			"LoginHandler bad credentials 1",
			"POST", "/api/v1/auth/login",
			kvp{},
			kvp{},
			`{ "login": "User_Name_not_same", "pwd": "password" }`,
			http.StatusUnauthorized,
			kvp{"Content-Type": "application/json"},
			`{"error": "Invalid username or password"}`,
			nil,
		},
		{
			"LoginHandler bad credentials 2",
			"POST", "/api/v1/auth/login",
			kvp{},
			kvp{},
			`{ "login": "example1@web.site", "pwd": "password" }`,
			http.StatusUnauthorized,
			kvp{"Content-Type": "application/json"},
			`{"error": "Invalid username or password"}`,
			nil,
		},
		{
			"LoginHandler bad credentials 3",
			"POST", "/api/v1/auth/login",
			kvp{},
			kvp{},
			`{ "login": "User_Name", "pwd": "wrong_password" }`,
			http.StatusUnauthorized,
			kvp{"Content-Type": "application/json"},
			`{"error": "Invalid username or password"}`,
			nil,
		},
		{
			"LoginHandler good 1",
			"POST", "/api/v1/auth/login",
			kvp{},
			kvp{},
			`{ "login": "User_Name", "pwd": "password" }`,
			http.StatusOK,
			kvp{"Content-Type": "application/json"},
			`{"message":"Login successful","username":"User_Name"}` + "\n",
			nil,
		},
		{
			"LoginHandler good 2",
			"POST", "/api/v1/auth/login",
			kvp{},
			kvp{},
			`{ "login": "example@web.site", "pwd": "password" }`,
			http.StatusOK,
			kvp{"Content-Type": "application/json"},
			`{"message":"Login successful","username":"User_Name"}` + "\n",
			nil,
		},
	}
}
